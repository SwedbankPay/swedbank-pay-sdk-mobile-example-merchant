openapi: '3.0.2'
info:
  title: PayEx Mobile Backend
  version: '1.0-beta01'
components:
  schemas:
    TopLevelResources:
      type: object
      required:
        - consumers
        - paymentorders
      properties:
        consumers:
          description: URL for the `consumers` resource
          type: string
        paymentorders:
          description: URL for the `paymentorders` resource
          type: string
      example:
        consumers: /consumers
        paymentorders: /paymentorders

    StartConsumerSessionArguments:
      type: object
      required:
        - consumerCountryCode
      properties:
        consumerCountryCode:
          description: Consumer's country of residence
          type: string
          enum:
            - 'NO'
            - SE
        msisdn:
          description: Consumer's mobile phone number *in international format*
          type: string
        email:
          description: Consumer's e-mail address
          type: string
        nationalIdentifier:
          type: object
          required:
            - socialSecurityNumber
            - countryCode
          properties:
            socialSecurityNumber:
              description: Consumer's social security number
              type: string
            countryCode:
              description: Issuer of the social security number
              type: string
              enum:
                - 'NO'
                - SE  
      example:
        consumerCountryCode: SE
        msisdn: +4798765432
        email: olivia.nyhuus@payex.com
        nationalIdentifier:
          socialSecurityNumber: 26026708248
          countryCode: SE

    ConsumerSession:
      type: object
      required:
        - operations
      properties:
        operations:
          description: The `operations` array from the [PayEx API](https://developer.payex.com/xwiki/wiki/developer/view/Main/ecommerce/technical-reference/consumers-resource#HInitiateConsumerSession)
          type: array
          items: 
            type: object
            example:
              rel: view-consumer-identification
              method: GET
              contentType: application/javascript
              href: https://ecom.externalintegration.payex.com/consumers/core/scripts/client/px.consumer.client.js?token=7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871

    CreatePaymentOrderArguments:
      type: object
      properties:
        consumerProfileRef:
          description: The payer's consumer profile reference. Omitted for anonymous payment.
          type: string
        merchantData:
          description: the merchantData originally passed to the Mobile SDK
      example:
        consumerProfileRef: 4b9b9160cc9b0668bf18c1c42f2fa994e89728a5f3022d53efeacd6f6f56d8f8
        merchantData:
          basketId: be3defe7-cc5a-459e-bce0-3e192ee0e45b
          currency: SEK
          languageCode: sv-SE
          items:
            - itemId: 1
              quantity: 1
              price: 1250
              vat: 250

    PaymentOrder:
      type: object
      required:
        - url
        - state
      properties:
        url:
          description: >
            A URL referencing this payment order. This can be used in a call to
            `GET {paymentOrder}`.


            This must be a URL managed by your implementation; do not pass the PayEx
            payment order url here. Your implementation must store the PayEx URL
            such that it can be used when the client later makes a GET request to
            the URL returned here.
          type: string
        state:
          description: >
            The state of the payment order as returned by the
            [PayEx API](https://developer.payex.com/xwiki/wiki/developer/view/Main/ecommerce/technical-reference/payment-orders-resource/#HPaymentOrders).
            Please refer to that documentation for possible values.


            At the moment of writing, the possible values are `Ready`, `Pending`, `Failed`, and `Aborted`
          type: string
        failureReason:
          description: >
            If `state` is `Failed`, this property shall contain the failure reason as returned by the
            [PayEx API](https://developer.payex.com/xwiki/wiki/developer/view/Main/ecommerce/technical-reference/core-payment-resources/#HTransaction).


            A payment order does not have a failure reason; rather the transactions contained
            in a payment order can have failure reasons. The backend should choose the most
            relevant failure reason from the failed transactions. Usually is should be
            the most recent failed `Authorization` transaction. N.B! A failed transaction does not
            mean the containing payment order has failed. It is important to only populate this
            field if the `state` of the payment order is `Failed`.
          type: string
        operations:
          description: >
            The `operations` array from the [PayEx API](https://developer.payex.com/xwiki/wiki/developer/view/Main/ecommerce/technical-reference/payment-orders-resource#HOperations).
          type: array
          items:
            type: object
            example:
              rel: view-paymentorder
              method: GET
              contentType: application/javascript
              href: https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=5300a73308c9bf5ef02ffa5283069a36f37cf4f07a0e109e9e623f92bf3947dd&culture=sv-SE
              
      example:
        url: /paymentorder/1569321659041
        state: Ready
        operations:
          - rel: view-paymentorder
            method: GET
            contentType: application/javascript
            href: https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=5300a73308c9bf5ef02ffa5283069a36f37cf4f07a0e109e9e623f92bf3947dd&culture=sv-SE

paths:
  /:
    get:
      summary: Static entry point to the API.
      description: >
        The API defines no static endpoints other than the entry interface, which
        is the "backend URL" passed to the mobile SDK. All other resources are found
        by following links. This entry interface returns links to all top level
        resouces.


        Link URLs may be absolute or relative. Relative URLs are to be resolved
        against the the URL where they were retrieved from; in the case of the entry
        point interface, this means the entry point URL, i.e. the "backend URL".


        The response SHOULD contain a `Cache-Control` header that allows caching
        the response for a reasonable amount of time. If caching is allowed,
        the implementation MUST make sure that the URLs in the response
        remain usable with the same semantics at least as long as the response
        is allowed to be cached. The client SHOULD repsect any `Cache-Control`
        header set in the response. It SHOULD treat a missing or no-store
        `Cache-Control` header as valid for a single request only.


        The default implementation uses static relative URLs for the top level resources,
        with a fairly long max-age.


        N.B! By default, the Mobile SDK only follows links to the same domain as the
        backend URL, or its subdomains. If you link to outside domains, you must manually
        whitelist them in your app. This is an intentional tradeoff on the side of security.
      responses:
        200:
          description: The top level resource URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopLevelResources'
          links:
            PostConsumers:
              description: N.B. The URL must be *resolved* against the entry point request URL, not simply appended to it.
              operationId: POST consumers
              parameters:
                consumers: $response.body/consumers

            PostPaymentOrders:
              description: N.B. The URL must be *resolved* against the entry point request URL, not simply appended to it.
              operationId: POST paymentorders
              parameters:
                paymentorders: $response.body/paymentorders
                



  /{consumers}:
    parameters:
      - in: path
        name: consumers
        required: true
        schema:
          type: string
    post:
      operationId: POST consumers
      summary: Initiates a consumer identification session
      description: >
        This operation shall start a consumer identification session using the arguments parsed
        from the request body. It returns an array of operations that can be used to complete the
        identification session as described
        [here](https://developer.payex.com/xwiki/wiki/developer/view/Main/ecommerce/technical-reference/consumers-resource/#HInitiateConsumerSession).


        The default implementation does some lightweight validation on the input values,
        and then forwards the call to the PayEx API; i.e. `POST /psp/consumers` with
        `"operation": "initiate-consumer-session"`, and the other arguments as given to the
        call to this operation. It then returns the `operations` array from the received result.
        The default implementation is usable as-is, but if you wish, you could customize it to,
        for example, check an HMAC header.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartConsumerSessionArguments'
      responses:
        '200':
          description: >
            Identification successfully started. It will continue by embedding the returned
            `view-consumer-identification` link in html as specified
            [here](https://developer.payex.com/xwiki/wiki/developer/view/Main/ecommerce/technical-reference/consumers-resource/#HViewConsumerIdentification).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerSession'

  /{paymentorders}:
    parameters:
      - in: path
        name: paymentorders
        required: true
        schema:
          type: string
    post:
      operationId: POST paymentorders
      summary: Creates a new payment order
      description: >
        This operation shall create a new payment order. It returns an array of operations
        that can be used to complete or abort the payment order as described
        [here](https://developer.payex.com/xwiki/wiki/developer/view/Main/ecommerce/technical-reference/payment-orders-resource#HOperations).


        Payment orders are created by calling the `POST /psp/paymentorders` 
        [PayEx API](https://developer.payex.com/xwiki/wiki/developer/view/Main/ecommerce/technical-reference/payment-orders-resource/#HCreatingapaymentorder).
        The default implementation will take care of executing the https request, but you must
        provide custom business logic that creates the `paymentorder` object for the request.
        For this you should examine the `merchantData` value, which is the JSON representation
        of the `merchantData` object used in the Mobile SDK call that initiated this payment.


        The Mobile SDK embeds one of the returned links in a html template and renders the result using
        the backend URL as the page URL for same-origin-policy purposes. It is therefore
        required that `hostUrls` contain the backend URL. It should not contain other values.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentOrderArguments'
      responses:
        '201':
          description: >
            Payment order successfully created. It will continue by embedding the returned
            `view-paymentorder` link in html as specified
            [here](https://developer.payex.com/xwiki/wiki/developer/view/Main/ecommerce/technical-reference/payment-orders-resource/#HViewPaymentOrder).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOrder'
          links:
            GetPaymentOrder:
              description: N.B. The URL must be *resolved* against the resource request URL, not simply appended to it.
              operationId: GET paymentorder
              parameters:
                paymentorder: $response.body/url

  /{paymentorder}:
    parameters:
      - in: path
        name: paymentorder
        required: true
        schema:
          type: string
    get:
      operationId: GET paymentorder
      summary: Retrieves the status of a payment order
      description: >
        This operation shall retrieve the specified payment order.
      responses:
        '200':
          description: The payment order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOrder'
