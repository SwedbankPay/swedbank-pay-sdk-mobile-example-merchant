openapi: '3.0.2'
info:
  title: PayEx Mobile Backend
  version: '1.0-beta04'
components:
  schemas:
    TopLevelResources:
      type: object
      required:
        - consumers
        - paymentorders
      properties:
        consumers:
          description: URL for the `consumers` resource
          type: string
        paymentorders:
          description: URL for the `paymentorders` resource
          type: string
      example:
        consumers: /consumers
        paymentorders: /paymentorders

    ConsumerSessionArguments:
      type: object
      required:
        - operation
        - language
        - shippingAddressRestrictedToCountryCodes
      properties:
        operation:
          description: The operation to perform. Must be `initiate-consumer-session`. See [Swedbank Pay documentation](https://developer.swedbankpay.com/checkout/checkin#step-1-initiate-session-for-consumer-identification).
          type: string
          enum: 
            - initiate-consumer-session
        language:
          description: Language to use in the checkin UI. See [Swedbank Pay documentation](https://developer.swedbankpay.com/checkout/checkin#step-1-initiate-session-for-consumer-identification).
          type: string
          enum:
            - nb-NO
            - sv-SE
            - en-US
        shippingAddressRestrictedToCountryCodes:
          description: List of ISO-3166 codes of countries the merchant can ship to. See [Swedbank Pay documentation](https://developer.swedbankpay.com/checkout/checkin#step-1-initiate-session-for-consumer-identification).
          type: array
          items: 
            type: string
            example: SE
      example:
        operation: initiate-consumer-session
        language: sv-SE
        shippingAddressRestrictedToCountryCodes: [SE, 'NO']

    ConsumerSession:
      type: object
      required:
        - operations
      properties:
        operations:
          description: The `operations` array from the [Swedbank Pay API](https://developer.swedbankpay.com/checkout/checkin#checkin-back-end)
          type: array
          items: 
            type: object
            example:
              rel: view-consumer-identification
              method: GET
              contentType: application/javascript
              href: https://ecom.externalintegration.payex.com/consumers/core/scripts/client/px.consumer.client.js?token=7e380fbb3196ea76cc45814c1d99d59b66db918ce2131b61f585645eff364871

    CreatePaymentOrderArguments:
      type: object
      required:
        - paymentorder
      properties:
        paymentorder:
          description: The payment order as specigied in the [Swedbank Pay documentation](https://developer.swedbankpay.com/checkout/payment-menu#request).
          type: object
          required:
            - operation
            - currency
            - amount
            - vatAmount
            - description
            - userAgent
            - language
            - generateRecurrenceToken
            - urls
            - payeeInfo
          properties:
            operation:
              description: The operation the payment order is to perform
              type: string
              enum:
                - Purchase
                - Verify
            currency:
              description: The ISO 4217 code of the currency to use for the payment order
              type: string
              example: SEK
            amount:
              description: The amount to charge; in the smallest unit of the currency. E.g. 10000 = 100.00 SEK
              type: integer
              example: 10000
            vatAmount:
              description: The amount of VAT included in the charge; in the smallest unit of the currency.
              type: integer
              example: 2000
            description:
              description: Description of the payment order
              type: string
            userAgent:
              description: The User Agent making this request.
              type: string
            language:
              description: The language to use in the Payment Menu UI.
              type: string
              enum:
                - nb-NO
                - sv-SE
                - en-US 
            generateRecurrenceToken:
              description: If `true`, then a token is generated that can be used in server-to-server recurring payments.
              type: boolean
            restrictedToInstruments:
              description: Usage of this field requires an agreement with Swedbank Pay. Please refer to [Swedbank Pay documentation](https://developer.swedbankpay.com/checkout/other-features#creating-a-payment-order).
              type: array
              items:
                type: string
            urls:
              description: URLs relevant to this payment order
              type: object
              required:
                - hostUrls
                - completeUrl
              properties:
                hostUrls:
                  description: List of valid page urls that can host the payment menu
                  type: array
                  items:
                    type: string
                    example: https://example.com/
                completeUrl: 
                  description: The URL that the payment menu will redirect to when the payment is complete
                  type: string
                  example: https://example.com/complete
                cancelUrl: 
                  description: The URL that the payment menu will redirect to when the payment is cancelUrl
                  type: string
                  example: https://example.com/cancel
                paymentUrl:
                  description: |
                    The URL that the payment process will redirect to when the payment menu needs to be reloaded

                  type: string
                  example: https://example.com/sdk-callback/android-intent?package=your.ecom.app&id=app-payment-id
                callbackUrl:
                  description: The URL where Swedbank Pay will make POST requests when the state of the payment order changes.
                  type: string
                  example: https://example.com/server-callback
                termsOfServiceUrl:
                  description: The URL that will be opened when the user needs to be shown your Terms of Service. Must be a https URL.
                  type: string
                  example: https://example.com/terms-of-service
            payeeInfo:
              description: Object containing information about the payee
              type: object
              required:
                - payeeId
                - payeeReference
              properties:
                payeeId:
                  description: The ID of the payee, usually the merchant ID.
                  type: string
                payeeReference:
                  description: A unique reference to this payment order in your system. See [Swedbank Pay documentation](https://developer.swedbankpay.com/checkout/other-features#payeereference) for details.
                  type: string
                payeeName:
                  description: Name of the payee
                  type: string
                productCategory:
                  description: Merchant specified product catergory for this payment order.
                  type: string
                orderReference:
                  description: Reference to merchant's own systems
                  type: string
                subsite:
                  description: Used do implement [split settlement](https://developer.swedbankpay.com/checkout/other-features#split-settlement)
                  type: string
            payer:
              description: Object containing information about the payer.
              type: object
              properties:
                consumerProfileRef:
                  description: The consumer profile reference obtained from the checkin flow
                  type: string
                email:
                  description: E-mail address of the payer
                  type: string
                msisdn:
                  description: Mobile phone number of the payer
                  type: string
            orderItems:
              description: List of items being bought with this payment order
              type: array
              items:
                type: object
                required:
                  - reference
                  - name
                  - type
                  - class
                  - quantity
                  - quantityUnit
                  - unitPrice
                  - vatPercent
                  - amount
                  - vatAmount
                properties:
                  reference:
                    description: Reference that identifies the items
                    type: string
                  name:
                    description: Name of the items
                    type: string
                  type:
                    description: Type of the items
                    type: string
                    enum:
                      - PRODUCT
                      - SERVICE
                      - SHIPPING_FEE
                      - PAYMENT_FEE
                      - DISCOUNT
                      - VALUE_CODE
                      - OTHER
                  class:
                    description: Merchant specified classification for the items
                    type: string
                  itemUrl:
                    description: URL to a page with information about the items
                    type: string
                  imageUrl:
                    description: URL to an image of the items
                    type: string
                  description:
                    description: Human-readable description of the items
                    type: string
                  discountDescription:
                    description: Human-readable description of any discount on the items
                    type: string
                  quantity:
                    description: Four decimal precision quantity of the items
                    type: integer
                  quantityUnit:
                    description: The unit of the quantity
                    type: string
                  unitPrice:
                    description: Price pre unit, including VAT
                    type: integer
                  discountPrice:
                    description: If the item is discounted, the discounted price including VAT
                    type: integer
                  vatPercent:
                    description: The VAT percent on the item, multiplied by 100; e.g. 25% => `2500`
                    type: integer
                  amount:
                    description: The total amount charged for this item; in the smallest unit of the currency.
                    type: integer
                  vatAmount:
                    description: The total amount of VAT charged for this item; in the smallest unit of the currency.
                    type: integer
            riskIndicator:
              description: Additional information for identifying the payer. Include as much as possible to reduce the chance of 3D-Secure authentication.
              type: object
              properties:
                deliveryEmailAdress:
                  description: E-mail address for electronic delivery
                  type: string
                deliveryTimeFrameIndicator:
                  description: |
                    Merchandise delivery timeframe

                    01: Electronic Delivery
                    02: Same day shipping
                    03: Overnight shipping
                    04: Two-day or more shipping
                  type: string
                  enum:
                    - '01'
                    - '02'
                    - '03'
                    - '04'
                preOrderDate:
                  description: Expected availability date for pre-orders. Format `YYYYMMDD`.
                  type: string
                  example: '20210123'
                preOrderPurchaseIndicator:
                  description: |
                    Indicates whether the payer is placing an order for merchandise with a future availability or release date.

                    01: Merchandise available
                    02: Future availability
                  type: string
                  enum:
                    - '01'
                    - '02'
                shipIndicator:
                  description: |
                    Shipping method for the purchase

                    01: Ship to cardholder’s billing address
                    02: Ship to another verified address on file with merchant
                    03: Ship to address that is different than cardholder’s billing address
                    04: Ship to Store / Pick-up at local store
                    05: Digital goods
                    06: Travel and Event tickets, not shipped
                    07: Other, e.g. gaming, digital service
                  type: string
                  enum:
                    - '01'
                    - '02'
                    - '03'
                    - '04'
                    - '05'
                    - '06'
                    - '07'
                giftCardPurchase:
                  description: '`true` if this is a purchase of a gift card'
                  type: boolean
                reOrderPurchaseIndicator:
                  description: |
                    Indicates whether the payer is placing an order for merchandise with a future availability or release date.

                    01: Merchandise available
                    02: Future availability
                  type: string
                  enum:
                    - '01'
                    - '02'
                pickUpAddress:
                  description: If `shipIndicator` is `04`, fill this object to decrease the risk factor
                  type: object
                  properties:
                    name:
                      description: Name of the payer
                      type: string
                    streetAddress:
                      description: Address of the payer
                      type: string
                    coAddress:
                      description: C/O address of the payer
                      type: string
                    city:
                      description: City of the payer
                      type: string
                    zipCode:
                      description: Zip code of the payer
                      type: string
                    countryCode:
                      description: Country code of the payer
                      type: string
            disablePaymentMenu:
              description: If `true`, and there is only one valid payment instrument, proceeds directly to that instrument in the UI
              type: boolean

      example:
        paymentOrder:
          operation: Purchase
          currency: SEK
          amount: 10000
          vatAmount: 2000
          description: Order 1234567
          userAgent: SwedbankPaySDK-Android/1.0
          language: en-US
          generateRecurrenceToken: false
          urls:
            hostUrls:
              - https://example.com/
            completeUrl: https://example.com/complete
            cancelUrl: https://example.com/cancel
            paymentUrl: https://example.com/sdk-callback/android-intent?package=your.ecom.app&id=abcdef
          payeeInfo:
            payeeId: merchant-token
            payeeReference: order-id
          orderItems:
            - reference: item987
              name: Demo Item
              type: PRODUCT
              class: TestProduct
              quantity: 1
              quantityUnit: pcs
              unitPrice: 10000
              vatPercent: 2500
              amount: 10000
              vatAmount: 2000

    PaymentOrder:
      type: object
      required:
        - operations
      properties:
        operations:
          description: >
            The `operations` array from the [Swedbank Pay API](https://developer.swedbankpay.com/checkout/other-features#operations).
          type: array
          items:
            type: object
            example:
              rel: view-paymentorder
              method: GET
              contentType: application/javascript
              href: https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=5300a73308c9bf5ef02ffa5283069a36f37cf4f07a0e109e9e623f92bf3947dd&culture=sv-SE

      example:
        operations:
          - rel: view-paymentorder
            method: GET
            contentType: application/javascript
            href: https://ecom.externalintegration.payex.com/paymentmenu/core/scripts/client/px.paymentmenu.client.js?token=5300a73308c9bf5ef02ffa5283069a36f37cf4f07a0e109e9e623f92bf3947dd&culture=sv-SE

    PayerOwnedPaymentTokens:
      type: object
      properties:
        payerOwnedPaymentTokens:
          description: A collection of payment tokens owned by the payer identified by `payerReference`.
          type: object
          properties:
            id:
              description: The `id` (url) of the Swedbank Pay resource
              type: string
            payerReference:
              description: The `payerReference` associated with these tokens
              type: string
            paymentTokens:
              description: The list of tokens and associated information
              type: array
              items:
                type: object
                properties:
                  paymentToken:
                    description: The payment token
                    type: string
                  instrument:
                    description: Payment instrument type of this token
                    type: string
                    example: CreditCard
                  instrumentDisplayName:
                    description: User-friendly name of the payment instrument
                    type: string
                    example: '411111******1111'
                  instrumentParameters:
                    description: Instrument-specific parameters.
                    type: object
                  operations:
                    description: The `operations` array from the [Swedbank Pay API](https://developer.swedbankpay.com/checkout/other-features#operations).
                    type: array
                    items:
                      type: object
                  mobileSDK:
                    description: Merchant Backend specific links related to this token
                    type: object
                    properties:
                      delete:
                        description: A URL for the PATCH `paymentToken` operation
                        type: string
                        example: /payers/1234/paymentTokens/5678
                        
    DeletePaymentTokenArguments:
      type: object
      properties:
        status:
          description: The desired status for the token. Must be `Deleted`
          type: string
          enum:
            - Deleted
        comment:
          description: A reason for the deletion
          type: string
          example: Deleted by user

paths:
  /:
    get:
      summary: Static entry point to the API.
      description: >
        The API defines no static endpoints other than the entry interface, which
        is the "backend URL" passed to the mobile SDK. All other resources are found
        by following links. This entry interface returns links to all top level
        resouces.


        Link URLs may be absolute or relative. Relative URLs are to be resolved
        against the the URL where they were retrieved from; in the case of the entry
        point interface, this means the entry point URL, i.e. the "backend URL".


        The response SHOULD contain a `Cache-Control` header that allows caching
        the response for a reasonable amount of time. If caching is allowed,
        the implementation MUST make sure that the URLs in the response
        remain usable with the same semantics at least as long as the response
        is allowed to be cached. The client SHOULD repsect any `Cache-Control`
        header set in the response. It SHOULD treat a missing or no-store
        `Cache-Control` header as valid for a single request only.


        The default implementation uses static relative URLs for the top level resources,
        with a fairly long max-age.


        N.B! By default, the Mobile SDK only follows links to the same domain as the
        backend URL, or its subdomains. If you link to outside domains, you must manually
        whitelist them in your app. This is an intentional tradeoff on the side of security.
      responses:
        200:
          description: The top level resource URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopLevelResources'
          links:
            PostConsumers:
              description: N.B. The URL must be *resolved* against the entry point request URL, not simply appended to it.
              operationId: POST consumers
              parameters:
                consumers: $response.body#/consumers

            PostPaymentOrders:
              description: N.B. The URL must be *resolved* against the entry point request URL, not simply appended to it.
              operationId: POST paymentorders
              parameters:
                paymentorders: $response.body#/paymentorders

  /{consumers}:
    parameters:
      - name: consumers
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: POST consumers
      summary: Initiates a consumer identification session
      description: >
        This operation starts a consumer identification session by forwarding the request
        to the [Swedbank Pay API](https://developer.swedbankpay.com/checkout/checkin#step-1-initiate-session-for-consumer-identification).
        It returns the response from that request.


        The implementation is encouraged to validate the request; it should not pass on
        nonsensical requests to the Swedbank Pay API.


        The mobile SDK will embed the received `view-consumer-identification` in a
        html page as specicied in the [documentation](https://developer.swedbankpay.com/checkout/checkin#step-2-display-swedbank-pay-checkin-module).
        When it receives the consumerProfileRef, it will continue with creating a payment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerSessionArguments'
      responses:
        '200':
          description: >
            Identification successfully started. It will continue by embedding the returned
            `view-consumer-identification` link in html as specified
            [here](https://developer.swedbankpay.com/checkout/checkin#step-2-display-swedbank-pay-checkin-module).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerSession'

  /{paymentorders}:
    parameters:
      - name: paymentorders
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: POST paymentorders
      summary: Creates a new payment order
      description: >
        This operation creates a new payment order by forwarding the request to the
        [Swedbank Pay API](https://developer.swedbankpay.com/checkout/payment-menu#request).
        It returns the response from that request.


        The implementation should validate the request and not pass on nonsensical requests.


        Furthermore, you may wish to do some preprocessing on the payment order in your
        merchant backend. The example backend sets `paymentorder.payeeInfo.payeeId`
        before forwarding the request; your implementation is encouraged to do the same.
        Additionally, you probably want to check that the payment order has the correct
        amount and orderItems.


        The mobile environment places special requirements on the `paymentUrl`.
        As "the payment" actually exists inside an app and not a website,
        we need a way to get back to the app that created the payment whenever
        there is a navigation to paymentUrl. Please see the `/sdk-callback/`
        endpoints for details on how this is done on the different platforms.
        This endpoint neither needs nor has special treatment for paymentUrl;
        it just passes whatever it was given. The SDK, however, contains utility
        functions that are aware of the `/sdk-callback/` endpoints and can create
        suitable paymentUrls.


        The mobile SDK will embed the received `view-consumer-identification` in a
        html page as specicied in the [documentation](https://developer.swedbankpay.com/checkout/payment-menu#step-4-display-the-payment-menu).
        It will then monitor the html content for navigation to the payment order's
        urls (`paymentorder.urls`), and react accordningly.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentOrderArguments'
      responses:
        '201':
          description: >
            Payment order successfully created. It will continue by embedding the returned
            `view-paymentorder` link in html as specified
            [here](https://developer.swedbankpay.com/checkout/payment-menu#step-4-display-the-payment-menu).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOrder'
                
  /payers/{payerReference}/paymentTokens:
    get:
      parameters:
        - name: payerReference
          in: path
          description: The `payerReference` whose tokens to retrieve
          required: true
          schema:
            type: string
      summary: Retrieves all payment tokens owned by a payer
      description: >
        This endpoint is optional. The mobile SDK contains a utility method
        that makes a request to this endpoint. If you do not use it in your
        application, then you have no need for this endpoint.
      
        Production implementations must have access control to ensure that a 
        user can only access their own tokens.
        
        The example implementation makes a call to the Swedbank Pay API and
        returns the response as-is. Your implementation may also retrieve the
        tokens from your own database.
      responses:
        '200':
          description: Data successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayerOwnedPaymentTokens'
          links:
            delete:
              description: N.B. The URL must be *resolved* against the entry point request URL, not simply appended to it.
              operationId: PATCH paymentToken
              parameters:
                paymentToken: $response.body#/payerOwnedPaymentTokens/paymentTokens/mobileSDK/delete
  
  /{paymentToken}:
    parameters:
      - name: paymentToken
        in: path
        required: true
        schema:
          type: string
    patch:
      operationId: PATCH paymentToken
      summary: Deletes a payment token
      description: >
        Making a PATCH request to the delete URL of a payment token
        can be used to delete the token.
        
        
        In the future, this endpoint may be extended to other purposes.
        For now, the only possible operation is deletion, which is achieved
        by setting the `status` parameter to `Deleted`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePaymentTokenArguments'
      responses: 
        '200':
          description: Token deleted
          content:
            application/json:
              schema:
                type: object

  /sdk-callback/android-intent:
    get:
      parameters:
        - name: package
          in: query
          description: The package id of the Android app to redirect to
          required: true
          schema:
            type: string
            example: your.ecom.app
      summary: Endpoint for redirecting back to an Android app
      description: >
        N.B! Endpoints under `/sdk-callback/` exist only to support routing http(s) URLs
        to mobile applications. As such they can be separate form the rest of the backend.
        The mobile SDKs have utility functions that work if your `/sdk-callback/` endpoints
        are hosted at the same domain as the backend entry point.


        For maximum compatibility, it is best to use http(s) urls for the paymentUrl.
        Using this endpoint to form the paymentUrl enables you to do this.


        This endpoint always returns a html document, which attempts to immediately redirect to
        an [Android intent url](https://developer.chrome.com/multidevice/android/intents),
        where the package of the intent is set to the package given in the package parameter,
        the action to `com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER`, and the uri (data) of the
        intent is the same as the url used to invoke this endpoint. The page also contains a link
        to that same intent url for the user to tap, in case the redirect is blocked
        (Chrome does this in some instances, and we cannot be sure of the behaviour of
        third-party browsers.)


        For example, if this endpoint is invoked at 
        `https://example.com/sdk-callback/android-intent?package=your.ecom.app&id=abcdef`,
        then the navigation to the intent url will result in an intent with `package = your.ecom.app`,
        `action = com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER`, and
        `data = https://example.com/sdk-callback/android-intent?package=your.ecom.app&id=abcdef`.
        This enables navigation to this url to be routed to the app even if it is opened
        in a browser, and requires no further configuration of the app using the SDK.
      responses:
        '200':
          description: >
            An html document that navigates to an intent url that starts
            an activity with the same url as was used to invoke this.
          content:
            text/html:
              example: |
                <html>
                <head>
                  <title>Swedbank Pay Payment</title>
                  <meta http-equiv="refresh" content="0;url=$intent://example.com/sdk-callback/android-intent?package=your.ecom.app&id=abcdef#Intent;scheme=https;action=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER;package=your.ecom.app;end;">
                </head>
                <body>
                  <p><a href="intent://example.com/sdk-callback/android-intent?package=your.ecom.app&id=abcdef#Intent;scheme=https;action=com.swedbankpay.mobilesdk.VIEW_PAYMENTORDER;package=your.ecom.app;end;">Back to app</a></p>
                </body>
                </html>

  /sdk-callback/ios-universal-link:
    get:
      parameters:
        - name: scheme
          in: query
          description: Custom url scheme used for fallback
          required: true
          schema:
            type: string
            example: yourecomapp
        - name: language
          in: query
          description: Language to use in the trampoline page
          required: true
          schema:
            type: string
            enum:
              - nb-NO
              - en-US
              - sv-SE
        - name: app
          in: query
          description: App name to use in the trampoline page
          required: false
          schema:
            type: string
            example: Your eCom App
        - name: fallback
          in: query
          description: If `true`, redirects to custom scheme url rather than the trampoline page
          required: false
          schema:
            type: boolean
      summary: Endpoint for redirecting back to an iOS app
      description: >
        N.B! Endpoints under `/sdk-callback/` exist only to support routing http(s) URLs
        to mobile applications. As such they can be separate form the rest of the backend.
        The mobile SDKs have utility functions that work if your `/sdk-callback/` endpoints
        are hosted at the same domain as the backend entry point.


        For maximum compatibility, it is best to use http(s) urls for the paymentUrl.
        Using this endpoint to form the paymentUrl enables you to do this.


        Like the Android equivalent, this endpoint always returns a redirect response.
        On iOS, the preferred way of routing a url to an app is to use 
        [Universal Links](https://developer.apple.com/ios/universal-links/).
        The domain of the paymentUrl, i.e. the domain of the merchant backend, should
        be added as an "applinks" associated domain to the app (of course, this requires
        the appropriate /.well-known/apple-app-site-association file to be served;
        the example backend has provisions for this). 


        However, Universal Links and 3D-Secure flows have incompatible characteristics:
        navigation to a Universal Link is only routed to the app if it originated from
        user interaction, while 3D-Secure flows often have an automatic redirect at the end.
        This can sometimes cause the Universal Link to be opened in Safari instead of the app.
        Safari then receives the redirect response from this endpoint, which will be to
        an attractive website with a continue button (the "trampoline page"). That continue button
        navigates back to the paymentUrl, but appended with a `fallback=true` parameter, giving 
        Safari another chance to route the navigation to the app. If even that fails, then
        the `fallback=true` parameter causes the redirect to instead be to a custom-scheme url.
        The custom scheme should be one unique to the app, ensuring correct routing. The downside
        of the fallback mechanism is an ugly confirmation dialog being shown.


        Note that for the above contraption to work correctly, the trampoline page must be hosted
        on a different domain, as Universal Links will only be followed if the navigation starts
        from a different domain. For this purpose, Swedbank Pay hosts a generic trampoline page at
        `https://ecom.stage.payex.com/externalresourcehost/trampoline?target=<paymentUrl-with-fallback=true>&language=<language-code>&app=<app-name>`.
        The example backend uses this as the trampoline page.


        To illustrate, here is a "full" flow:

        1.  Navigate to `https://example.com/sdk-callback/ios-universal-link?scheme=yourecomapp&language=en-US&id=abcdef&app=Your%20eCom%20App`.
            This is a Universal Link, and in some cases will immediately be routed to your app.
            If it is opened in Safari instead, we are redirected (HTTP 301) to:
        2.  `https://ecom.stage.payex.com/externalresourcehost/trampoline?target=https%3A%2F%2Fexample.com%2Fsdk-callback%2Fios-universal-link%3Fscheme%3Dyourecomapp%26language%3Den-US%26id%3Dabcdef%26app%3DYour%2520eCom%2520App%26fallback%3Dtrue&language=en-US&app=Your%20eCom%20App`
            This is the trampoline page. It contains a single link (button), which navigates to:
        3.  `https://example.com/sdk-callback/ios-universal-link?scheme=yourecomapp&language=en-US&id=abcdef&app=Your%20eCom%20App&fallback=true`
            This is again a Universal Link. This time the navigation started from a user interaction, 
            so unless there is a problem with your configuration, it will be routed to your app
            rather that opened in Safari. If, however, something goes wrong and the link is instead
            opened in Safari, we are redirected to:
        4.  `yourecomapp://example.com/sdk-callback/ios-universal-link?scheme=yourecomapp&language=en-US&id=abcdef&app=Your%20eCom%20App&fallback=true`
            This is a custom scheme link, so it will be routed to your app, but only after
            a confirmation dialog.


        The SDK has logic to recognize the different forms as being equivalent to the paymentUrl.
      responses:
        '301':
          description: >
            Redirect to the trampoline page or to a custom-scheme url
          headers:
            Location:
              description: The trampoline page or custom-scheme url
              schema:
                type: string
                example: https://ecom.stage.payex.com/externalresourcehost/trampoline?target=https%3A%2F%2Fexample.com%2Fsdk-callback%2Fios-universal-link%3Fscheme%3Dyourecomapp%26language%3Den-US%26id%3Dabcdef%26app%3DYour%2520eCom%2520App%26fallback%3Dtrue&language=en-US&app=Your%20eCom%20App