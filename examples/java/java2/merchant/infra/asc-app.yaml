---
AWSTemplateFormatVersion: "2010-09-09"

Description: Regularly deployable application container

Parameters:
  ElbId:
    Type: String
  ElbSecGroupId:
    Type: String
  S3InstanceProfileId:
    Type: String
  JarBucketId:
    Type: String
  JarName:
    Type: String

Resources:
  ASGSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ASG Security Group
      VpcId: vpc-de29c2a7
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: "-1"
          ToPort: "-1"
          IpProtocol: "-1"
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ElbSecGroupId
          FromPort: 8080
          ToPort: 8080
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
  ASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - eu-west-1a
        - eu-west-1b
        - eu-west-1c
      Cooldown: 60
      DesiredCapacity: 1
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfig
      LoadBalancerNames: [!Ref ElbId]
      MaxSize: 1
      MinSize: 1
      Tags: [{"Key": "Name", "Value": {"Fn::Join": [" ",[{"Ref": "AWS::StackName"}, "resource"]]}, "PropagateAtLaunch": "True"}]
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages: {}
          groups: {}
          users: {}
          sources: {}
          files: {}
          commands:
            02-install-packages:
              command: 'yum -y install java-1.8.0-openjdk-headless'
            07-fetch-jar:
              command: !Join
                - ''
                - - 'aws s3 cp s3://'
                  - !Ref JarBucketId
                  - '/'
                  - !Ref JarName
                  - ' /home/ec2-user && '
                  - 'chown ec2-user:ec2-user /home/ec2-user/'
                  - !Ref JarName
            08-run-app:
              command: !Join
                - ''
                - - 'sudo -u ec2-user java8 -jar -Dspring.profiles.active=prod /home/ec2-user/'
                  - !Ref JarName
                  - ' &> /home/ec2-user/spring.output &'
          services: {}
    Properties:
      ImageId: ami-047bb4163c506cd98
      InstanceType: m5.large
      KeyName: johans-keypair
      IamInstanceProfile: !Ref S3InstanceProfileId
      SecurityGroups:
        - !Ref ASGSecGroup
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - "#!/bin/bash -v\n"
              - "# Fail and exit function\n"
              - 'function error_exit
                   '
              - "{\n"
              - '  /opt/aws/bin/cfn-signal -e 1 -r "$1" '''
              - Ref: WaitHandle
              - "'\n"
              - "  exit 1\n"
              - "}\n"
              - "/opt/aws/bin/cfn-init -v -s "
              - Ref: AWS::StackId
              - " -r LaunchConfig "
              - "    --region "
              - Ref: AWS::Region
              - " || error_exit 'Failed to run cfn-init'\n"
              - "# All is well so signal success\n"
              - /opt/aws/bin/cfn-signal -e 0 -r "LaunchConfig setup complete" '
              - Ref: WaitHandle
              - "'\n"
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: LaunchConfig
    Properties:
      Handle:
        Ref: WaitHandle
      Timeout: '300'
